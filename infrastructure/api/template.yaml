AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs20.x
    MemorySize: 128

Resources:
  # Topic for games
  GameTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt GameIntegrationWorker.Arn
  # Topic for games
  IntegrationTopic:
    Type: AWS::SNS::Topic

  # Provide permission for SNS to invoke the Lambda functions
  GameIntegrationWorkerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref GameIntegrationWorker
      Principal: sns.amazonaws.com

  # Consumes GameTopic
  GameIntegrationWorker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/process-game.checkGameForIntegration
      Environment:
        Variables:
          TopicArn: !Ref IntegrationTopic
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt IntegrationTopic.TopicName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/process-game.ts

  # Consumes IntegrationTopic
  IntegrationExecutorWorker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/execute-integration.processGameIntegration
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref IntegrationTopic
            FilterPolicy:
              entity:
                - game
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/execute-integration.ts

  PlayablApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn

  PublishGame:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/publish-game.publishGameHandler
      Environment:
        Variables:
          TopicArn: !Ref GameTopic
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /publish/game
            Method: post
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt GameTopic.TopicName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/publish-game.ts

  CreateStripeAccount:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.createStripeAccount
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/create
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  FinishStripeSetup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.finishStripeSetup
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/finish
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  CheckStripeSetup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.checkStripeSetup
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/check
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  GetStripePrices:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.getStripePrices
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/prices
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  GetStripePrice:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.getStripePrice
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/price
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  UpdateStripePrice:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.updateStripePrice
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/price
            Method: put
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  GetStripeProduct:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.getStripeProduct
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/product
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  CreateStripePaymentLink:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 15
      Handler: handlers/stripe.createPaymentLink
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/paymentLink
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  UpdateStripePaymentLink:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.updateStripePaymentLink
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/paymentLink
            Method: put
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  GetStripePaymentLink:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.getStripePaymentLink
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref PlayablApi
            Path: /customer/paymentLink
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  HandleStripeWebhook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/stripe.handleStripeWebhook
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
          StripeSecretKey: !Ref StripeSecretKey
          StripeWebhookKey: !Ref StripeWebhookKey
          SlackStripeWebhook: !Ref SlackStripeWebhook
          SlackLogWebhook: !Ref SlackLogWebhook
      Events:
        Api:
          Type: Api
          Properties:
            Auth:
              Authorizer: NONE
            RestApiId: !Ref PlayablApi
            Path: /stripe/webhook
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/stripe.ts

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/authorize.authorizer
      Environment:
        Variables:
          SupabaseUrl: !Ref SupabaseUrl
          SupabaseServiceRole: !Ref SupabaseServiceRole
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - handlers/authorize.ts

Parameters:
  SupabaseUrl:
    Type: String
  SupabaseServiceRole:
    Type: String
  StripeSecretKey:
    Type: String
  StripeWebhookKey:
    Type: String
  SlackStripeWebhook:
    Type: String
  SlackLogWebhook:
    Type: String

Outputs:
  GameIntegrationWorkerName:
    Description: GameIntegrationWorker function name
    Value: !Ref GameIntegrationWorker

  SnsTopicName:
    Description: SNS topic name
    Value: !GetAtt GameTopic.TopicName

  SnsTopicARN:
    Description: SNS topic ARN
    Value: !Ref GameTopic

  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${PlayablApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
